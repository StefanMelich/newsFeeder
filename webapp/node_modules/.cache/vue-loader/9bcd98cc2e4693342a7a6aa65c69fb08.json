{"remainingRequest":"C:\\Users\\WIN10\\IdeaProjects\\newsfeeder\\webapp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\WIN10\\IdeaProjects\\newsfeeder\\webapp\\src\\components\\PostUpdate.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\WIN10\\IdeaProjects\\newsfeeder\\webapp\\src\\components\\PostUpdate.vue","mtime":1557703749960},{"path":"C:\\Users\\WIN10\\IdeaProjects\\newsfeeder\\webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1557703735755},{"path":"C:\\Users\\WIN10\\IdeaProjects\\newsfeeder\\webapp\\node_modules\\babel-loader\\lib\\index.js","mtime":1557703735405},{"path":"C:\\Users\\WIN10\\IdeaProjects\\newsfeeder\\webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1557703735755},{"path":"C:\\Users\\WIN10\\IdeaProjects\\newsfeeder\\webapp\\node_modules\\vue-loader\\lib\\index.js","mtime":1557703748920}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mdbBtn, mdbInput } from 'mdbvue';\n\nexport default {\n    name: \"PostUpdate\",\n    props: {\n        content: String\n    },\n    components: {\n        mdbBtn, mdbInput\n    },\n    data() {\n        return {\n            message: '',\n            hasError: false\n        }\n    },\n    methods: {\n        updatePost() {\n            if (!this.hasError) {\n                this.$emit('update-post-event', this.message);\n            } else {\n                alert(\"Content length is too long.\");\n            }\n        },\n        cancel() {\n            this.$emit('update-post-cancel');\n        },\n        isError(remaining) {\n            this.hasError = remaining < 0;\n        }\n    },\n    computed: {\n        computedCountDown() {\n            let chars = this.message.length;\n            let limit = 250;\n            let remaining = (limit - chars);\n            this.isError(remaining);\n            return remaining + \"/\" + limit + \" characters remaining\";\n        }\n    },\n    mounted() {\n        this.message = this.content\n    }\n}\n",{"version":3,"sources":["PostUpdate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PostUpdate.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n\r\n    <div class=\"z-depth-1 z-box\">\r\n        <mdb-input type=\"textarea\" label=\"Update post\" outline :rows=\"3\"\r\n                   v-model=\"message\"/>\r\n\r\n        <div class=\"text-right\">\r\n            <p class='text-small' v-bind:class=\"{'text-danger': hasError }\">\r\n                {{ computedCountDown }}\r\n            </p>\r\n            <mdb-btn rounded color=\"primary\" v-on:click=\"updatePost\">Update</mdb-btn>\r\n            <mdb-btn rounded color=\"default\" @click=\"cancel\">Cancel</mdb-btn>\r\n        </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\n    import { mdbBtn, mdbInput } from 'mdbvue';\r\n\r\n    export default {\r\n        name: \"PostUpdate\",\r\n        props: {\r\n            content: String\r\n        },\r\n        components: {\r\n            mdbBtn, mdbInput\r\n        },\r\n        data() {\r\n            return {\r\n                message: '',\r\n                hasError: false\r\n            }\r\n        },\r\n        methods: {\r\n            updatePost() {\r\n                if (!this.hasError) {\r\n                    this.$emit('update-post-event', this.message);\r\n                } else {\r\n                    alert(\"Content length is too long.\");\r\n                }\r\n            },\r\n            cancel() {\r\n                this.$emit('update-post-cancel');\r\n            },\r\n            isError(remaining) {\r\n                this.hasError = remaining < 0;\r\n            }\r\n        },\r\n        computed: {\r\n            computedCountDown() {\r\n                let chars = this.message.length;\r\n                let limit = 250;\r\n                let remaining = (limit - chars);\r\n                this.isError(remaining);\r\n                return remaining + \"/\" + limit + \" characters remaining\";\r\n            }\r\n        },\r\n        mounted() {\r\n            this.message = this.content\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n    .text-small {\r\n        font-size: 0.9em;\r\n    }\r\n\r\n</style>"]}]}