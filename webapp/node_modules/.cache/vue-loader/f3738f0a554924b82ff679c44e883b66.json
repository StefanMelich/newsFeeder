{"remainingRequest":"C:\\Users\\WIN10\\IdeaProjects\\newsfeeder\\webapp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\WIN10\\IdeaProjects\\newsfeeder\\webapp\\src\\components\\PostAdd.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\WIN10\\IdeaProjects\\newsfeeder\\webapp\\src\\components\\PostAdd.vue","mtime":1578909122665},{"path":"C:\\Users\\WIN10\\IdeaProjects\\newsfeeder\\webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1557703735755},{"path":"C:\\Users\\WIN10\\IdeaProjects\\newsfeeder\\webapp\\node_modules\\babel-loader\\lib\\index.js","mtime":1557703735405},{"path":"C:\\Users\\WIN10\\IdeaProjects\\newsfeeder\\webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1557703735755},{"path":"C:\\Users\\WIN10\\IdeaProjects\\newsfeeder\\webapp\\node_modules\\vue-loader\\lib\\index.js","mtime":1557703748920}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mdbModal, mdbModalHeader, mdbModalTitle, mdbModalBody, mdbModalFooter, mdbBtn, mdbInput } from 'mdbvue';\nimport postService from \"../auth/services/post.service\";\n\nexport default {\n    name: \"PostAdd\",\n    components: {\n        mdbModal,\n        mdbModalHeader,\n        mdbModalTitle,\n        mdbModalBody,\n        mdbModalFooter,\n        mdbBtn,\n        mdbInput\n    },\n    data() {\n        return {\n            modal: true,\n            content: '',\n            hasError: false\n        };\n    },\n    methods: {\n        /* eslint-disable no-console */\n        close() {\n            this.modal = false;\n            this.$router.push({name: 'posts-list'});\n        },\n        save() {\n            if (!this.hasError) {\n                this.modal = false;\n                this.addPost(this.content);\n\n                console.log(\"new post released\");\n            } else {\n                alert(\"Content length is too long.\");\n            }\n        },\n        isError(remaining) {\n            this.hasError = remaining < 0;\n        },\n        addPost(content) {\n            let data = { content: content };\n            postService\n                .createPost(data)\n                .then(response => {\n                    console.log(response.data);\n                    // redirect after response from server\n                    this.$router.push({name: 'posts-list'});\n                })\n                .catch(e => console.log(e));\n        }\n    },\n    computed: {\n        computedCountDown() {\n            let chars = this.content.length;\n            let limit = 250;\n            let remaining = (limit - chars);\n            this.isError(remaining);\n            return remaining + \"/\" + limit + \" characters remaining\";\n        }\n    },\n}\n",{"version":3,"sources":["PostAdd.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PostAdd.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div>\r\n        <mdb-modal :show=\"modal\" @close=\"close\">\r\n            <mdb-modal-header>\r\n                <mdb-modal-title>New Post</mdb-modal-title>\r\n            </mdb-modal-header>\r\n            <mdb-modal-body>\r\n                <!-- main content here -->\r\n                <mdb-input type=\"textarea\" label=\"Content of a new post.\" outline :rows=\"5\"\r\n                           v-model=\"content\"/>\r\n\r\n                <div class=\"text-right\">\r\n                    <p class='text-small' v-bind:class=\"{'text-danger': hasError }\">\r\n                        {{ computedCountDown }}\r\n                    </p>\r\n                </div>\r\n                <!-- main content here -->\r\n            </mdb-modal-body>\r\n            <mdb-modal-footer>\r\n                <mdb-btn color=\"secondary\" @click.native=\"close\">Close</mdb-btn>\r\n                <mdb-btn color=\"primary\" @click.native=\"save\">Save changes</mdb-btn>\r\n            </mdb-modal-footer>\r\n        </mdb-modal>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import { mdbModal, mdbModalHeader, mdbModalTitle, mdbModalBody, mdbModalFooter, mdbBtn, mdbInput } from 'mdbvue';\r\n    import postService from \"../auth/services/post.service\";\r\n\r\n    export default {\r\n        name: \"PostAdd\",\r\n        components: {\r\n            mdbModal,\r\n            mdbModalHeader,\r\n            mdbModalTitle,\r\n            mdbModalBody,\r\n            mdbModalFooter,\r\n            mdbBtn,\r\n            mdbInput\r\n        },\r\n        data() {\r\n            return {\r\n                modal: true,\r\n                content: '',\r\n                hasError: false\r\n            };\r\n        },\r\n        methods: {\r\n            /* eslint-disable no-console */\r\n            close() {\r\n                this.modal = false;\r\n                this.$router.push({name: 'posts-list'});\r\n            },\r\n            save() {\r\n                if (!this.hasError) {\r\n                    this.modal = false;\r\n                    this.addPost(this.content);\r\n\r\n                    console.log(\"new post released\");\r\n                } else {\r\n                    alert(\"Content length is too long.\");\r\n                }\r\n            },\r\n            isError(remaining) {\r\n                this.hasError = remaining < 0;\r\n            },\r\n            addPost(content) {\r\n                let data = { content: content };\r\n                postService\r\n                    .createPost(data)\r\n                    .then(response => {\r\n                        console.log(response.data);\r\n                        // redirect after response from server\r\n                        this.$router.push({name: 'posts-list'});\r\n                    })\r\n                    .catch(e => console.log(e));\r\n            }\r\n        },\r\n        computed: {\r\n            computedCountDown() {\r\n                let chars = this.content.length;\r\n                let limit = 250;\r\n                let remaining = (limit - chars);\r\n                this.isError(remaining);\r\n                return remaining + \"/\" + limit + \" characters remaining\";\r\n            }\r\n        },\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}